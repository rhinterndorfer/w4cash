//    Openbravo POS is a point of sales application designed for touch screens.
//    Copyright (C) 2007-2009 Openbravo, S.L.
//    http://www.openbravo.com/product/pos
//
//    This file is part of Openbravo POS.
//
//    Openbravo POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Openbravo POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.

package com.openbravo.pos.sales.simple;

import com.openbravo.pos.forms.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;
import com.openbravo.pos.sales.*;
import com.openbravo.pos.ticket.TicketInfo;


public class JTicketsBagServer extends JTicketsBag {

	private Timer m_timer;
	private DataLogicReceipts dlReceipts = null;

	private void StopTimer() {
		if (m_timer != null && m_timer.isRunning())
			m_timer.stop();
	}

	private void StartTimer() {
		if (m_timer != null && !m_timer.isRunning())
			m_timer.restart();
	}

	/** Creates new form JTicketsBagSimple */
	public JTicketsBagServer(AppView app, TicketsEditor panelticket) {

		super(app, panelticket);
		initComponents();
		
		dlReceipts = (DataLogicReceipts) app.getBean("com.openbravo.pos.sales.DataLogicReceipts");
	}

	public void ScaleButtons() {
	}

	public void activate() {
		m_panelticket.setActiveTicket(null, null);

		m_timer = new javax.swing.Timer(5000, new TimerAction());
		m_timer.start();
	}

	private class TimerAction implements ActionListener {
		public void actionPerformed(ActionEvent evt) {
			try {
				StopTimer();
				new LoadTicketsThread().start();
			} catch (Exception ex) {
				// do nothing
			}
		}
	}

	
	
	private class LoadTicketsThread extends Thread {
		public void run() {
			try {
				for(SharedTicketInfo info : dlReceipts.getServerSharedTicketList()){
					String sharedTicketId = info.getId();
					TicketInfo ticketinfo = dlReceipts.getSharedTicket(sharedTicketId);
					
					if("print".equals(info.getState())) {
						m_panelticket.setActiveTicket(ticketinfo, info.getName());
						m_panelticket.DoSaveTicketEvent();	
					}
				}
				

				m_timer.setInitialDelay(2000);
				m_timer.setDelay(2000);
			} catch (Exception ex) {
				// do nothing
			}
			StartTimer();
		}
	}

	public boolean deactivate() {
		m_panelticket.setActiveTicket(null, null);
		return true;
	}

	public void deleteTicket(boolean delete) {
		m_panelticket.setActiveTicket(null, null);
	}

	protected JComponent getBagComponent() {
		return this;
	}

	protected JComponent getNullComponent() {
		return new JPanel();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {
	}// </editor-fold>//GEN-END:initComponents

	@Override
	protected void ticketListChange(JTicketLines ticketLines) {
		// TODO Auto-generated method stub

	}

}
